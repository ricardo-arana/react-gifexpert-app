{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","key","GifExpertApp","obj","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAa5C,OACI,0BAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFN,GAAe,SAAAO,GAAU,OAAKL,GAAL,mBAAoBK,OAC7CJ,EAAc,MAKV,2BAAOK,KAAK,OACZC,MAAOP,EACPQ,SAdkB,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,Y,uBCPlBG,EAAO,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATrB,kBAabM,GAba,4CAAJ,sDCCPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EACZZ,mBAAS,CAC/BmB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAYtC,OANAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAM,SAAAd,GAAG,OAAKY,EAAS,CAACf,KAAMG,EAAKU,SAAS,SAC9C,CAACpB,IAGGqB,EDTiBI,CAAazB,GAA9BO,EAH4B,EAG5BA,KAAMa,EAHsB,EAGtBA,QAIb,OADAM,QAAQC,IAAIpB,GAER,oCACA,wBAAIS,UAAU,qCAAsChB,GACnDoB,GAAW,uBAAGJ,UAAW,oCAAd,WACX,yBAAKA,UAAU,aACVT,EAAKE,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEZjDmB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,cADhB,mBACvBM,EADuB,KACXP,EADW,KAE9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACMO,EAAWe,KAAI,SAAAqB,GAAG,OAAI,kBAAC,EAAD,CAASF,IAAKE,EAAK9B,SAAU8B,UCPrEC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.94b1e8ac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setCategories( categories => [inputValue, ...categories]);\n        setInputValue('');\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n            value={inputValue}\n            onChange={ handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n","\nexport const getGifs  = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=iAf3Zt3j06rxJsY6LPWxE4bQXq85pots`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n\n    const {data, loading} = useFetchGifs(category);\n\n    \n    console.log(data);\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n        {loading && <p className =\"animate__animated animate__flash\">Loading</p>}\n         <div className=\"card-grid\">\n            { data.map((img) => <GifGridItem key={img.id} {...img} />) }\n        </div> \n        </>\n    )\n}\n","\nimport { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n        .then( img =>  setState({data: img, loading: false }) );\n    }, [category])\n    \n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One punch']);\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr/>\n            <ol>\n                { categories.map(obj => <GifGrid key={obj} category={obj} />) }\n            </ol>\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n  \n"],"sourceRoot":""}